'''This file is all about managing what the user sees'''

from settings import *
from PIL import ImageTk, Image
import time
from subsystems.render import *
from subsystems.fancy import displayText, generateColorBox, generateBorderBox
from subsystems.visuals import OrbVisualObject, PathVisualObject, ButtonVisualObject, EditableTextBoxVisualObject, DummyVisualObject
from subsystems.counter import Counter
from subsystems.pathing import pointAt
from subsystems.sprite import readImgSingleFullState

class Interface:
    def __init__(self):
        self.mx = 0
        self.my = 0
        self.mPressed = False
        self.mRising = False
        self.fps = 0
        self.ticks = 0
        self.activity = ""
        self.c = Counter()
        '''Interactable Visual Objects'''
        self.interactableVisualObjects = {

            -999 : [" ", DummyVisualObject("dummy", (0,0))],

            self.c.c():["o",ButtonVisualObject("sprites",(7,0),FRAME_OPTIONS_BUTTON_OFF_ARRAY,FRAME_OPTIONS_BUTTON_ON_ARRAY)],
            self.c.c():["o",ButtonVisualObject("visuals",(134,0),FRAME_OPTIONS_BUTTON_OFF_ARRAY,FRAME_OPTIONS_BUTTON_ON_ARRAY)],
            self.c.c():["o",ButtonVisualObject("project",(261,0),FRAME_OPTIONS_BUTTON_OFF_ARRAY,FRAME_OPTIONS_BUTTON_ON_ARRAY)]
            
        }
        #for i in range(10): self.interactableVisualObjects[self.c.c()] = ["a", OrbVisualObject(f"test{i}")]
        '''Noninteractable, Adaptive, Visual Objects'''
        self.pathVisualObject = PathVisualObject(self.c.c(), "path")
        '''Options - Interactable, Stationary, Visual Objects'''
        self.interacting = -999
        self.editorTab = "p"
        self.stringKeyQueue = ""
        pass

    def tick(self,mx,my,mPressed,fps,keyQueue):
        '''Entire Screen: `(0,0) to (1365,697)`: size `(1366,698)`'''
        self.mx = mx if (0<=mx and mx<=1365) and (0<=my and my<=697) else self.mx 
        self.my = my if (0<=mx and mx<=1365) and (0<=my and my<=697) else self.my
        self.mPressed = mPressed > 0
        self.mRising = mPressed==2
        self.fps = fps
        self.ticks += 1 if self.fps==0 else round(RENDER_FPS/self.fps)
        for key in keyQueue: 
            if key in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789":
                self.stringKeyQueue+=key
            else:
                if key=="space":
                    self.stringKeyQueue+=" "
                if key=="BackSpace":
                    self.stringKeyQueue=self.stringKeyQueue[0:-1]
                if key=="Return":
                    self.interacting = -998
                    break
        pass

        previousInteracting = self.interacting
        if not(self.mPressed):
            self.interacting = -999
        if self.interacting == -999 and self.mPressed:
            for id in self.interactableVisualObjects:
                if self.interactableVisualObjects[id][0] == "a":
                    if self.interactableVisualObjects[id][1].getInteractable(self.mx - 23, self.my - 36):
                        self.interacting = id
                        break
                if self.interactableVisualObjects[id][0] == "o":
                    if self.interactableVisualObjects[id][1].getInteractable(self.mx - 953, self.my - 558):
                        self.interacting = id
                        break
        if self.interacting != -999:
            section = self.interactableVisualObjects[self.interacting][0]
            if section == "a": 
                self.interactableVisualObjects[self.interacting][1].updatePos(self.mx - 23, self.my - 36)
                self.interactableVisualObjects[self.interacting][1].keepInFrame(903,507)
            if section == "o": 
                self.interactableVisualObjects[self.interacting][1].updatePos(self.mx - 953, self.my - 558)
                self.interactableVisualObjects[self.interacting][1].keepInFrame(388,123)
        if ((self.mPressed)) and (previousInteracting == -999) and (self.interacting != -999) and (self.interactableVisualObjects[self.interacting][1].type  == "textbox"): 
            self.stringKeyQueue = self.interactableVisualObjects[self.interacting][1].txt
        if (self.interacting != -999) and (self.interactableVisualObjects[self.interacting][1].type  == "textbox"):
            self.interactableVisualObjects[self.interacting][1].updateText(self.stringKeyQueue)
        if (previousInteracting != -999) and (previousInteracting != -998) and (self.interactableVisualObjects[previousInteracting][1].type  == "textbox"):
            if not(self.interacting == -998):
                self.interacting = previousInteracting
                self.interactableVisualObjects[self.interacting][1].updateText(self.stringKeyQueue)
            else:
                self.interactableVisualObjects[previousInteracting][1].updateText(self.stringKeyQueue)

    def getImageAnimation(self):
        '''Animation Interface: `(23,36) to (925,542)`: size `(903,507)`'''
        rmx = self.mx - 23
        rmy = self.my - 36
        img = FRAME_ANIMATION_ARRAY.copy()

        # tempPoint = self.pathVisualObject.path[self.ticks%len(self.pathVisualObject.path)]
        # aSillyCat = rotateDeg(UP_ARROW_ARRAY, tempPoint[2]%360)
        # placeOver(img, aSillyCat, (round(tempPoint[0]+(128-aSillyCat.shape[1])/2),round(tempPoint[1]+(128-aSillyCat.shape[0])/2)), False)

        # placeOver(img, displayText(f"Pointing At: {pointAt((350,350),(self.mx, self.my))}", "m"), (200,100))
        # aSillyCat = rotateDeg(UP_ARROW_ARRAY,pointAt((350,350),(self.mx, self.my)))
        # placeOver(img, aSillyCat, (round(350+(128-aSillyCat.shape[1])/2),round(350+(128-aSillyCat.shape[0])/2)))

        for id in self.interactableVisualObjects:
            if self.interactableVisualObjects[id][0] == "a":
                self.interactableVisualObjects[id][1].tick(img, self.interacting==id)

        tempPath = []
        for id in self.interactableVisualObjects: 
            if self.interactableVisualObjects[id][1].type == "orb": 
                tempPath.append(self.interactableVisualObjects[id][1].positionO.getPosition())
        self.pathVisualObject.tick(img, tempPath)

        bigPath = [((100.0, 100.0, 0.0), 0, 100.0, 0, 100.0, 0, 0), ((100.667, 100.667, 12.434), 0, 99.889, 0, 100.0, 0, 0), ((101.333, 101.333, 19.707), 0, 99.778, 0, 100.0, 0, 0), ((102.0, 102.0, 24.867), 0, 99.667, 0, 100.0, 0, 0), ((102.667, 102.667, 28.87), 0, 99.556, 0, 100.0, 0, 0), ((103.333, 103.333, 32.141), 0, 99.444, 0, 100.0, 0, 0), ((104.0, 104.0, 34.906), 0, 99.333, 0, 100.0, 0, 0), ((104.667, 104.667, 37.301), 0, 99.222, 0, 100.0, 0, 0), ((105.333, 105.333, 39.414), 0, 99.111, 0, 100.0, 0, 0), ((106.0, 106.0, 41.304), 0, 99.0, 0, 100.0, 0, 0), ((106.667, 106.667, 43.013), 0, 98.889, 0, 100.0, 0, 0), ((107.333, 107.333, 44.574), 0, 98.778, 0, 100.0, 0, 0), ((108.0, 108.0, 46.01), 0, 98.667, 0, 100.0, 0, 0), ((108.667, 108.667, 47.339), 0, 98.556, 0, 100.0, 0, 0), ((109.333, 109.333, 48.577), 0, 98.444, 0, 100.0, 0, 0), ((110.0, 110.0, 49.735), 0, 98.333, 0, 100.0, 0, 0), ((110.667, 110.667, 50.822), 0, 98.222, 0, 100.0, 0, 0), ((111.333, 111.333, 51.848), 0, 98.111, 0, 100.0, 0, 0), ((112.0, 112.0, 52.817), 0, 98.0, 0, 100.0, 0, 0), ((112.667, 112.667, 53.737), 0, 97.889, 0, 100.0, 0, 0), ((113.333, 113.333, 54.613), 0, 97.778, 0, 100.0, 0, 0), ((114.0, 114.0, 55.447), 0, 97.667, 0, 100.0, 0, 0), ((114.667, 114.667, 56.245), 0, 97.556, 0, 100.0, 0, 0), ((115.333, 115.333, 57.008), 0, 97.444, 0, 100.0, 0, 0), ((116.0, 116.0, 57.74), 0, 97.333, 0, 100.0, 0, 0), ((116.667, 116.667, 58.444), 0, 97.222, 0, 100.0, 0, 0), ((117.333, 117.333, 59.121), 0, 97.111, 0, 100.0, 0, 0), ((118.0, 118.0, 59.773), 0, 97.0, 0, 100.0, 0, 0), ((118.667, 118.667, 60.403), 0, 96.889, 0, 100.0, 0, 0), ((119.333, 119.333, 61.011), 0, 96.778, 0, 100.0, 0, 0), ((120.0, 120.0, 61.599), 0, 96.667, 0, 100.0, 0, 0), ((120.667, 120.667, 62.168), 0, 96.556, 0, 100.0, 0, 0), ((121.333, 121.333, 62.72), 0, 96.444, 0, 100.0, 0, 0), ((122.0, 122.0, 63.256), 0, 96.333, 0, 100.0, 0, 0), ((122.667, 122.667, 63.776), 0, 96.222, 0, 100.0, 0, 0), ((123.333, 123.333, 64.281), 0, 96.111, 0, 100.0, 0, 0), ((124.0, 124.0, 64.773), 0, 96.0, 0, 100.0, 0, 0), ((124.667, 124.667, 65.251), 0, 95.889, 0, 100.0, 0, 0), ((125.333, 125.333, 65.717), 0, 95.778, 0, 100.0, 0, 0), ((126.0, 126.0, 66.171), 0, 95.667, 0, 100.0, 0, 0), ((126.667, 126.667, 66.614), 0, 95.556, 0, 100.0, 0, 0), ((127.333, 127.333, 67.046), 0, 95.444, 0, 100.0, 0, 0), ((128.0, 128.0, 67.468), 0, 95.333, 0, 100.0, 0, 0), ((128.667, 128.667, 67.881), 0, 95.222, 0, 100.0, 0, 0), ((129.333, 129.333, 68.284), 0, 95.111, 0, 100.0, 0, 0), ((130.0, 130.0, 68.678), 0, 95.0, 0, 100.0, 0, 0), ((130.667, 130.667, 69.064), 0, 94.889, 0, 100.0, 0, 0), ((131.333, 131.333, 69.442), 0, 94.778, 0, 100.0, 0, 0), ((132.0, 132.0, 69.811), 0, 94.667, 0, 100.0, 0, 0), ((132.667, 132.667, 70.174), 0, 94.556, 0, 100.0, 0, 0), ((133.333, 133.333, 70.529), 0, 94.444, 0, 100.0, 0, 0), ((134.0, 134.0, 70.877), 0, 94.333, 0, 100.0, 0, 0), ((134.667, 134.667, 71.219), 0, 94.222, 0, 100.0, 0, 0), ((135.333, 135.333, 71.554), 0, 94.111, 0, 100.0, 0, 0), ((136.0, 136.0, 71.884), 0, 94.0, 0, 100.0, 0, 0), ((136.667, 136.667, 72.207), 0, 93.889, 0, 100.0, 0, 0), ((137.333, 137.333, 72.524), 0, 93.778, 0, 100.0, 0, 0), ((138.0, 138.0, 72.836), 0, 93.667, 0, 100.0, 0, 0), ((138.667, 138.667, 73.143), 0, 93.556, 0, 100.0, 0, 0), ((139.333, 139.333, 73.444), 0, 93.444, 0, 100.0, 0, 0), ((140.0, 140.0, 73.741), 0, 93.333, 0, 100.0, 0, 0), ((140.667, 140.667, 74.033), 0, 93.222, 0, 100.0, 0, 0), ((141.333, 141.333, 74.32), 0, 93.111, 0, 100.0, 0, 0), ((142.0, 142.0, 74.602), 0, 93.0, 0, 100.0, 0, 0), ((142.667, 142.667, 74.88), 0, 92.889, 0, 100.0, 0, 0), ((143.333, 143.333, 75.154), 0, 92.778, 0, 100.0, 0, 0), ((144.0, 144.0, 75.424), 0, 92.667, 0, 100.0, 0, 0), ((144.667, 144.667, 75.69), 0, 92.556, 0, 100.0, 0, 0), ((145.333, 145.333, 75.951), 0, 92.444, 0, 100.0, 0, 0), ((146.0, 146.0, 76.21), 0, 92.333, 0, 100.0, 0, 0), ((146.667, 146.667, 76.464), 0, 92.222, 0, 100.0, 0, 0), ((147.333, 147.333, 76.715), 0, 92.111, 0, 100.0, 0, 0), ((148.0, 148.0, 76.962), 0, 92.0, 0, 100.0, 0, 0), ((148.667, 148.667, 77.206), 0, 91.889, 0, 100.0, 0, 0), ((149.333, 149.333, 77.447), 0, 91.778, 0, 100.0, 0, 0), ((150.0, 150.0, 77.685), 0, 91.667, 0, 100.0, 0, 0), ((150.667, 150.667, 77.919), 0, 91.556, 0, 100.0, 0, 0), ((151.333, 151.333, 78.151), 0, 91.444, 0, 100.0, 0, 0), ((152.0, 152.0, 78.379), 0, 91.333, 0, 100.0, 0, 0), ((152.667, 152.667, 78.605), 0, 91.222, 0, 100.0, 0, 0), ((153.333, 153.333, 78.828), 0, 91.111, 0, 100.0, 0, 0), ((154.0, 154.0, 79.048), 0, 91.0, 0, 100.0, 0, 0), ((154.667, 154.667, 79.265), 0, 90.889, 0, 100.0, 0, 0), ((155.333, 155.333, 79.48), 0, 90.778, 0, 100.0, 0, 0), ((156.0, 156.0, 79.692), 0, 90.667, 0, 100.0, 0, 0), ((156.667, 156.667, 79.902), 0, 90.556, 0, 100.0, 0, 0), ((157.333, 157.333, 80.109), 0, 90.444, 0, 100.0, 0, 0), ((158.0, 158.0, 80.314), 0, 90.333, 0, 100.0, 0, 0), ((158.667, 158.667, 80.517), 0, 90.222, 0, 100.0, 0, 0), ((159.333, 159.333, 80.718), 0, 90.111, 0, 100.0, 0, 0), ((160.0, 160.0, 80.916), 0, 90.0, 0, 100.0, 0, 0), ((160.667, 160.667, 81.112), 0, 89.889, 0, 100.0, 0, 0), ((161.333, 161.333, 81.306), 0, 89.778, 0, 100.0, 0, 0), ((162.0, 162.0, 81.498), 0, 89.667, 0, 100.0, 0, 0), ((162.667, 162.667, 81.687), 0, 89.556, 0, 100.0, 0, 0), ((163.333, 163.333, 81.875), 0, 89.444, 0, 100.0, 0, 0), ((164.0, 164.0, 82.061), 0, 89.333, 0, 100.0, 0, 0), ((164.667, 164.667, 82.245), 0, 89.222, 0, 100.0, 0, 0), ((165.333, 165.333, 82.427), 0, 89.111, 0, 100.0, 0, 0), ((166.0, 166.0, 82.608), 0, 89.0, 0, 100.0, 0, 0), ((166.667, 166.667, 82.786), 0, 88.889, 0, 100.0, 0, 0), ((167.333, 167.333, 82.963), 0, 88.778, 0, 100.0, 0, 0), ((168.0, 168.0, 83.138), 0, 88.667, 0, 100.0, 0, 0), ((168.667, 168.667, 83.311), 0, 88.556, 0, 100.0, 0, 0), ((169.333, 169.333, 83.483), 0, 88.444, 0, 100.0, 0, 0), ((170.0, 170.0, 83.653), 0, 88.333, 0, 100.0, 0, 0), ((170.667, 170.667, 83.821), 0, 88.222, 0, 100.0, 0, 0), ((171.333, 171.333, 83.988), 0, 88.111, 0, 100.0, 0, 0), ((172.0, 172.0, 84.153), 0, 88.0, 0, 100.0, 0, 0), ((172.667, 172.667, 84.317), 0, 87.889, 0, 100.0, 0, 0), ((173.333, 173.333, 84.48), 0, 87.778, 0, 100.0, 0, 0), ((174.0, 174.0, 84.64), 0, 87.667, 0, 100.0, 0, 0), ((174.667, 174.667, 84.8), 0, 87.556, 0, 100.0, 0, 0), ((175.333, 175.333, 84.958), 0, 87.444, 0, 100.0, 0, 0), ((176.0, 176.0, 85.115), 0, 87.333, 0, 100.0, 0, 0), ((176.667, 176.667, 85.27), 0, 87.222, 0, 100.0, 0, 0), ((177.333, 177.333, 85.424), 0, 87.111, 0, 100.0, 0, 0), ((178.0, 178.0, 85.577), 0, 87.0, 0, 100.0, 0, 0), ((178.667, 178.667, 85.728), 0, 86.889, 0, 100.0, 0, 0), ((179.333, 179.333, 85.878), 0, 86.778, 0, 100.0, 0, 0), ((180.0, 180.0, 86.027), 0, 86.667, 0, 100.0, 0, 0), ((180.667, 180.667, 86.175), 0, 86.556, 0, 100.0, 0, 0), ((181.333, 181.333, 86.321), 0, 86.444, 0, 100.0, 0, 0), ((182.0, 182.0, 86.466), 0, 86.333, 0, 100.0, 0, 0), ((182.667, 182.667, 86.61), 0, 86.222, 0, 100.0, 0, 0), ((183.333, 183.333, 86.753), 0, 86.111, 0, 100.0, 0, 0), ((184.0, 184.0, 86.895), 0, 86.0, 0, 100.0, 0, 0), ((184.667, 184.667, 87.036), 0, 85.889, 0, 100.0, 0, 0), ((185.333, 185.333, 87.175), 0, 85.778, 0, 100.0, 0, 0), ((186.0, 186.0, 87.314), 0, 85.667, 0, 100.0, 0, 0), ((186.667, 186.667, 87.451), 0, 85.556, 0, 100.0, 0, 0), ((187.333, 187.333, 87.588), 0, 85.444, 0, 100.0, 0, 0), ((188.0, 188.0, 87.723), 0, 85.333, 0, 100.0, 0, 0), ((188.667, 188.667, 87.857), 0, 85.222, 0, 100.0, 0, 0), ((189.333, 189.333, 87.991), 0, 85.111, 0, 100.0, 0, 0), ((190.0, 190.0, 88.123), 0, 85.0, 0, 100.0, 0, 0), ((190.667, 190.667, 88.255), 0, 84.889, 0, 100.0, 0, 0), ((191.333, 191.333, 88.385), 0, 84.778, 0, 100.0, 0, 0), ((192.0, 192.0, 88.515), 0, 84.667, 0, 100.0, 0, 0), ((192.667, 192.667, 88.643), 0, 84.556, 0, 100.0, 0, 0), ((193.333, 193.333, 88.771), 0, 84.444, 0, 100.0, 0, 0), ((194.0, 194.0, 88.898), 0, 84.333, 0, 100.0, 0, 0), ((194.667, 194.667, 89.024), 0, 84.222, 0, 100.0, 0, 0), ((195.333, 195.333, 89.149), 0, 84.111, 0, 100.0, 0, 0), ((196.0, 196.0, 89.273), 0, 84.0, 0, 100.0, 0, 0), ((196.667, 196.667, 89.396), 0, 83.889, 0, 100.0, 0, 0), ((197.333, 197.333, 89.518), 0, 83.778, 0, 100.0, 0, 0), ((198.0, 198.0, 89.64), 0, 83.667, 0, 100.0, 0, 0), ((198.667, 198.667, 89.761), 0, 83.556, 0, 100.0, 0, 0), ((199.333, 199.333, 89.881), 0, 83.444, 0, 100.0, 0, 0), ((200, 200, 90.0), 0, 83.333, 0, 100.0, 0, 0), ((200.0, 200.0, 89.4), 0, 83.222, 0, 100.0, 0, 0), ((203.333, 203.333, 88.8), 0, 83.111, 0, 100.0, 0, 0), ((206.667, 206.667, 88.2), 0, 83.0, 0, 100.0, 0, 0), ((210.0, 210.0, 87.6), 0, 82.889, 0, 100.0, 0, 0), ((213.333, 213.333, 87.0), 0, 82.778, 0, 100.0, 0, 0), ((216.667, 216.667, 86.4), 0, 82.667, 0, 100.0, 0, 0), ((220.0, 220.0, 85.8), 0, 82.556, 0, 100.0, 0, 0), ((223.333, 223.333, 85.2), 0, 82.444, 0, 100.0, 0, 0), ((226.667, 226.667, 84.6), 0, 82.333, 0, 100.0, 0, 0), ((230.0, 230.0, 84.0), 0, 82.222, 0, 100.0, 0, 0), ((233.333, 233.333, 83.4), 0, 82.111, 0, 100.0, 0, 0), ((236.667, 236.667, 82.8), 0, 82.0, 0, 100.0, 0, 0), ((240.0, 240.0, 82.2), 0, 81.889, 0, 100.0, 0, 0), ((243.333, 243.333, 81.6), 0, 81.778, 0, 100.0, 0, 0), ((246.667, 246.667, 81.0), 0, 81.667, 0, 100.0, 0, 0), ((250.0, 250.0, 80.4), 0, 81.556, 0, 100.0, 0, 0), ((253.333, 253.333, 79.8), 0, 81.444, 0, 100.0, 0, 0), ((256.667, 256.667, 79.2), 0, 81.333, 0, 100.0, 0, 0), ((260.0, 260.0, 78.6), 0, 81.222, 0, 100.0, 0, 0), ((263.333, 263.333, 78.0), 0, 81.111, 0, 100.0, 0, 0), ((266.667, 266.667, 77.4), 0, 81.0, 0, 100.0, 0, 0), ((270.0, 270.0, 76.8), 0, 80.889, 0, 100.0, 0, 0), ((273.333, 273.333, 76.2), 0, 80.778, 0, 100.0, 0, 0), ((276.667, 276.667, 75.6), 0, 80.667, 0, 100.0, 0, 0), ((280.0, 280.0, 75.0), 0, 80.556, 0, 100.0, 0, 0), ((283.333, 283.333, 74.4), 0, 80.444, 0, 100.0, 0, 0), ((286.667, 286.667, 73.8), 0, 80.333, 0, 100.0, 0, 0), ((290.0, 290.0, 73.2), 0, 80.222, 0, 100.0, 0, 0), ((293.333, 293.333, 72.6), 0, 80.111, 0, 100.0, 0, 0), ((296.667, 296.667, 72.0), 0, 80.0, 0, 100.0, 0, 0), ((300.0, 300.0, 71.4), 0, 79.889, 0, 100.0, 0, 0), ((303.333, 303.333, 70.8), 0, 79.778, 0, 100.0, 0, 0), ((306.667, 306.667, 70.2), 0, 79.667, 0, 100.0, 0, 0), ((310.0, 310.0, 69.6), 0, 79.556, 0, 100.0, 0, 0), ((313.333, 313.333, 69.0), 0, 79.444, 0, 100.0, 0, 0), ((316.667, 316.667, 68.4), 0, 79.333, 0, 100.0, 0, 0), ((320.0, 320.0, 67.8), 0, 79.222, 0, 100.0, 0, 0), ((323.333, 323.333, 67.2), 0, 79.111, 0, 100.0, 0, 0), ((326.667, 326.667, 66.6), 0, 79.0, 0, 100.0, 0, 0), ((330.0, 330.0, 66.0), 0, 78.889, 0, 100.0, 0, 0), ((333.333, 333.333, 65.4), 0, 78.778, 0, 100.0, 0, 0), ((336.667, 336.667, 64.8), 0, 78.667, 0, 100.0, 0, 0), ((340.0, 340.0, 64.2), 0, 78.556, 0, 100.0, 0, 0), ((343.333, 343.333, 63.6), 0, 78.444, 0, 100.0, 0, 0), ((346.667, 346.667, 63.0), 0, 78.333, 0, 100.0, 0, 0), ((350.0, 350.0, 62.4), 0, 78.222, 0, 100.0, 0, 0), ((353.333, 353.333, 61.8), 0, 78.111, 0, 100.0, 0, 0), ((356.667, 356.667, 61.2), 0, 78.0, 0, 100.0, 0, 0), ((360.0, 360.0, 60.6), 0, 77.889, 0, 100.0, 0, 0), ((363.333, 363.333, 60.0), 0, 77.778, 0, 100.0, 0, 0), ((366.667, 366.667, 59.4), 0, 77.667, 0, 100.0, 0, 0), ((370.0, 370.0, 58.8), 0, 77.556, 0, 100.0, 0, 0), ((373.333, 373.333, 58.2), 0, 77.444, 0, 100.0, 0, 0), ((376.667, 376.667, 57.6), 0, 77.333, 0, 100.0, 0, 0), ((380.0, 380.0, 57.0), 0, 77.222, 0, 100.0, 0, 0), ((383.333, 383.333, 56.4), 0, 77.111, 0, 100.0, 0, 0), ((386.667, 386.667, 55.8), 0, 77.0, 0, 100.0, 0, 0), ((390.0, 390.0, 55.2), 0, 76.889, 0, 100.0, 0, 0), ((393.333, 393.333, 54.6), 0, 76.778, 0, 100.0, 0, 0), ((396.667, 396.667, 54.0), 0, 76.667, 0, 100.0, 0, 0), ((400.0, 400.0, 53.4), 0, 76.556, 0, 100.0, 0, 0), ((402.198, 402.16, 52.8), 0, 76.444, 0, 100.0, 0, 0), ((404.346, 404.198, 52.2), 0, 76.333, 0, 100.0, 0, 0), ((406.444, 406.111, 51.6), 0, 76.222, 0, 100.0, 0, 0), ((408.494, 407.901, 51.0), 0, 76.111, 0, 100.0, 0, 0), ((410.494, 409.568, 50.4), 0, 76.0, 0, 100.0, 0, 0), ((412.444, 411.111, 49.8), 0, 75.889, 0, 100.0, 0, 0), ((414.346, 412.531, 49.2), 0, 75.778, 0, 100.0, 0, 0), ((416.198, 413.827, 48.6), 0, 75.667, 0, 100.0, 0, 0), ((418.0, 415.0, 48.0), 0, 75.556, 0, 100.0, 0, 0), ((419.753, 416.049, 47.4), 0, 75.444, 0, 100.0, 0, 0), ((421.457, 416.975, 46.8), 0, 75.333, 0, 100.0, 0, 0), ((423.111, 417.778, 46.2), 0, 75.222, 0, 100.0, 0, 0), ((424.716, 418.457, 45.6), 0, 75.111, 0, 100.0, 0, 0), ((426.272, 419.012, 45.0), 0, 75.0, 0, 100.0, 0, 0), ((427.778, 419.444, 44.4), 0, 74.889, 0, 100.0, 0, 0), ((429.235, 419.753, 43.8), 0, 74.778, 0, 100.0, 0, 0), ((430.642, 419.938, 43.2), 0, 74.667, 0, 100.0, 0, 0), ((432.0, 420.0, 42.6), 0, 74.556, 0, 100.0, 0, 0), ((433.309, 419.938, 42.0), 0, 74.444, 0, 100.0, 0, 0), ((434.568, 419.753, 41.4), 0, 74.333, 0, 100.0, 0, 0), ((435.778, 419.444, 40.8), 0, 74.222, 0, 100.0, 0, 0), ((436.938, 419.012, 40.2), 0, 74.111, 0, 100.0, 0, 0), ((438.049, 418.457, 39.6), 0, 74.0, 0, 100.0, 0, 0), ((439.111, 417.778, 39.0), 0, 73.889, 0, 100.0, 0, 0), ((440.123, 416.975, 38.4), 0, 73.778, 0, 100.0, 0, 0), ((441.086, 416.049, 37.8), 0, 73.667, 0, 100.0, 0, 0), ((442.0, 415.0, 37.2), 0, 73.556, 0, 100.0, 0, 0), ((442.864, 413.827, 36.6), 0, 73.444, 0, 100.0, 0, 0), ((443.679, 412.531, 36.0), 0, 73.333, 0, 100.0, 0, 0), ((444.444, 411.111, 35.4), 0, 73.222, 0, 100.0, 0, 0), ((445.16, 409.568, 34.8), 0, 73.111, 0, 100.0, 0, 0), ((445.827, 407.901, 34.2), 0, 73.0, 0, 100.0, 0, 0), ((446.444, 406.111, 33.6), 0, 72.889, 0, 100.0, 0, 0), ((447.012, 404.198, 33.0), 0, 72.778, 0, 100.0, 0, 0), ((447.531, 402.16, 32.4), 0, 72.667, 0, 100.0, 0, 0), ((448.0, 400.0, 31.8), 0, 72.556, 0, 100.0, 0, 0), ((448.42, 397.716, 31.2), 0, 72.444, 0, 100.0, 0, 0), ((448.79, 395.309, 30.6), 0, 72.333, 0, 100.0, 0, 0), ((449.111, 392.778, 30.0), 0, 72.222, 0, 100.0, 0, 0), ((449.383, 390.123, 29.4), 0, 72.111, 0, 100.0, 0, 0), ((449.605, 387.346, 28.8), 0, 72.0, 0, 100.0, 0, 0), ((449.778, 384.444, 28.2), 0, 71.889, 0, 100.0, 0, 0), ((449.901, 381.42, 27.6), 0, 71.778, 0, 100.0, 0, 0), ((449.975, 378.272, 27.0), 0, 71.667, 0, 100.0, 0, 0), ((450.0, 375.0, 26.4), 0, 71.556, 0, 100.0, 0, 0), ((449.975, 371.605, 25.8), 0, 71.444, 0, 100.0, 0, 0), ((449.901, 368.086, 25.2), 0, 71.333, 0, 100.0, 0, 0), ((449.778, 364.444, 24.6), 0, 71.222, 0, 100.0, 0, 0), ((449.605, 360.679, 24.0), 0, 71.111, 0, 100.0, 0, 0), ((449.383, 356.79, 23.4), 0, 71.0, 0, 100.0, 0, 0), ((449.111, 352.778, 22.8), 0, 70.889, 0, 100.0, 0, 0), ((448.79, 348.642, 22.2), 0, 70.778, 0, 100.0, 0, 0), ((448.42, 344.383, 21.6), 0, 70.667, 0, 100.0, 0, 0), ((448.0, 340.0, 21.0), 0, 70.556, 0, 100.0, 0, 0), ((447.531, 335.494, 20.4), 0, 70.444, 0, 100.0, 0, 0), ((447.012, 330.864, 19.8), 0, 70.333, 0, 100.0, 0, 0), ((446.444, 326.111, 19.2), 0, 70.222, 0, 100.0, 0, 0), ((445.827, 321.235, 18.6), 0, 70.111, 0, 100.0, 0, 0), ((445.16, 316.235, 18.0), 0, 70.0, 0, 100.0, 0, 0), ((444.444, 311.111, 17.4), 0, 69.889, 0, 100.0, 0, 0), ((443.679, 305.864, 16.8), 0, 69.778, 0, 100.0, 0, 0), ((442.864, 300.494, 16.2), 0, 69.667, 0, 100.0, 0, 0), ((442.0, 295.0, 15.6), 0, 69.556, 0, 100.0, 0, 0), ((441.086, 289.383, 15.0), 0, 69.444, 0, 100.0, 0, 0), ((440.123, 283.642, 14.4), 0, 69.333, 0, 100.0, 0, 0), ((439.111, 277.778, 13.8), 0, 69.222, 0, 100.0, 0, 0), ((438.049, 271.79, 13.2), 0, 69.111, 0, 100.0, 0, 0), ((436.938, 265.679, 12.6), 0, 69.0, 0, 100.0, 0, 0), ((435.778, 259.444, 12.0), 0, 68.889, 0, 100.0, 0, 0), ((434.568, 253.086, 11.4), 0, 68.778, 0, 100.0, 0, 0), ((433.309, 246.605, 10.8), 0, 68.667, 0, 100.0, 0, 0), ((432.0, 240.0, 10.2), 0, 68.556, 0, 100.0, 0, 0), ((430.642, 233.272, 9.6), 0, 68.444, 0, 100.0, 0, 0), ((429.235, 226.42, 9.0), 0, 68.333, 0, 100.0, 0, 0), ((427.778, 219.444, 8.4), 0, 68.222, 0, 100.0, 0, 0), ((426.272, 212.346, 7.8), 0, 68.111, 0, 100.0, 0, 0), ((424.716, 205.123, 7.2), 0, 68.0, 0, 100.0, 0, 0), ((423.111, 197.778, 6.6), 0, 67.889, 0, 100.0, 0, 0), ((421.457, 190.309, 6.0), 0, 67.778, 0, 100.0, 0, 0), ((419.753, 182.716, 5.4), 0, 67.667, 0, 100.0, 0, 0), ((418.0, 175.0, 4.8), 0, 67.556, 0, 100.0, 0, 0), ((416.198, 167.16, 4.2), 0, 67.444, 0, 100.0, 0, 0), ((414.346, 159.198, 3.6), 0, 67.333, 0, 100.0, 0, 0), ((412.444, 151.111, 3.0), 0, 67.222, 0, 100.0, 0, 0), ((410.494, 142.901, 2.4), 0, 67.111, 0, 100.0, 0, 0), ((408.494, 134.568, 1.8), 0, 67.0, 0, 100.0, 0, 0), ((406.444, 126.111, 1.2), 0, 66.889, 0, 100.0, 0, 0), ((404.346, 117.531, 0.6), 0, 66.778, 0, 100.0, 0, 0), ((402.198, 108.827, 0.6), 0, 66.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 66.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 66.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 66.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 66.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 66.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 66.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 65.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 64.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 63.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 62.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 61.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 60.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 59.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 58.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 57.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 56.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 55.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 54.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 53.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 52.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.222, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.111, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 51.0, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 50.889, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 50.778, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 50.667, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 50.556, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 50.444, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 50.333, 0, 100.0, 0, 0), ((400, 100, 0.6), 0, 50.222, 0, 100.0, 0, 0)] 

        frame = bigPath[self.ticks%(len(bigPath)-1)]
        placeOver(img, readImgSingleFullState(frame, [PLACEHOLDER_IMAGE_5_ARRAY]), (frame[0][0],frame[0][1]))
        print(f"at frame {self.ticks%(len(bigPath)-1)} of {len(bigPath)-1}")

        return arrayToImage(img)
    
    def getImageTimeline(self):
        '''Timeline Interface: `(23,558) to (925,680)`: size `(903,123)`'''
        img = FRAME_TIMELINE_ARRAY.copy()
        placeOver(img, displayText(f"FPS: {self.fps}", "m"), (55,15))
        placeOver(img, displayText(f"Relative (animation) Mouse Position: ({self.mx-23}, {self.my-36})", "m"), (455,55))
        placeOver(img, displayText(f"Mouse Pressed: {self.mPressed}", "m", colorTXT = (0,255,0,255) if self.mPressed else (255,0,0,255)), (55,55))
        placeOver(img, displayText(f"Rising Edge: {self.mRising}", "m", colorTXT = (0,255,0,255) if self.mRising else (255,0,0,255)), (55,95))
        placeOver(img, displayText(f"Interacting With Element: {self.interacting}", "m"), (455,15))
        placeOver(img, displayText(f"stringKeyQueue: {self.stringKeyQueue}", "m"), (455,95))

        return arrayToImage(img)
    
    def getImageEditor(self):
        '''Editor Interface: `(953,36) to (1340,542)`: size `(388,507)`'''
        img = FRAME_EDITOR_VISUALS_ARRAY.copy() if self.editorTab=="v" else FRAME_EDITOR_ARRAY.copy()
        if self.editorTab == "p":
            '''About Project Tab!'''
            placeOver(img, displayText("Project:", "m"),                                                            (15,EDITOR_SPACING(1))) 
            placeOver(img, displayText("Name: please implement this", "m"),                                         (20,EDITOR_SPACING(2)))
            placeOver(img, displayText("Size: 1155 MB (please implement this)", "m"),                               (20,EDITOR_SPACING(3)))

            placeOver(img, displayText("Elements:", "m"),                                                           (15,EDITOR_SPACING(5)))
            placeOver(img, displayText("Sprites: please implement this", "m"),                                      (20,EDITOR_SPACING(6))) 
            placeOver(img, displayText("Folders: please implement this", "m"),                                      (20,EDITOR_SPACING(7))) 
            placeOver(img, displayText("Paths: please implement this", "m"),                                        (20,EDITOR_SPACING(8))) 
            placeOver(img, displayText("Total Path Elements: please implement this", "m"),                          (20,EDITOR_SPACING(9))) 
            placeOver(img, displayText("Total Path Waypoints: please implement this", "m"),                         (20,EDITOR_SPACING(10))) 
            placeOver(img, displayText(f"Interactable Visual Objects: {len(self.interactableVisualObjects)}", "m"), (20,EDITOR_SPACING(11))) 

            placeOver(img, displayText("Dates:", "m"),                                                              (15,EDITOR_SPACING(13)))
            placeOver(img, displayText("Created On: ", "m"),                                                        (20,EDITOR_SPACING(14)))  
            placeOver(img, displayText("Last Saved: ", "m"),                                                        (20,EDITOR_SPACING(15)))  
            placeOver(img, displayText("Version Created: ", "m"),                                                   (20,EDITOR_SPACING(16)))  
            placeOver(img, displayText("Current Version: ", "m"),                                                   (20,EDITOR_SPACING(17)))  
            placeOver(img, displayText("Time Spent: ", "m"),                                                        (20,EDITOR_SPACING(18))) 

        return arrayToImage(img)
    
    def getImageOptions(self):
        '''Options Interface: `(953,558) to (1340,680)`: size `(388,123)`'''
        img = FRAME_OPTIONS_ARRAY.copy()

        for id in self.interactableVisualObjects:
            if self.interactableVisualObjects[id][0] == "o":
                if self.interacting==id: self.editorTab = self.interactableVisualObjects[id][1].name[0]
                self.interactableVisualObjects[id][1].tick(img, self.interacting==id or self.editorTab==self.interactableVisualObjects[id][1].name[0])

        if 23 <= self.mx and self.mx <= 925 and 36 <= self.my and self.my <= 542:
            placeOver(img, displayText(f"rx: {self.mx-23}", "l"), (20,83)) 
            placeOver(img, displayText(f"ry: {self.my-36}", "l"), (120,83))
        else:            
            placeOver(img, displayText(f" x: {self.mx}", "l", colorTXT=(155,155,155,255)), (20,83)) 
            placeOver(img, displayText(f" y: {self.my}", "l", colorTXT=(155,155,155,255)), (120,83))
        placeOver(img, displayText("Sprites                  Visuals                  Project", "m"), (193, 31), True)
        placeOver(img, GEAR_ARRAY, (338,80))
        return arrayToImage(img)
    
    def saveState(self):
        pass

    def close(self):
        pass